name: Protobuf code generation

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

jobs:
  generate:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
    
      - name: Install protobuf compiler
        run: sudo apt-get update &&  sudo apt-get install protobuf-compiler protobuf-compiler-grpc
      - name: Make directories for code
        run: mkdir ../python ../csharp ../grpc-dotnet
      - name: Correct GRPC plugin links
        run: |
            sudo ln -s $(which grpc_csharp_plugin) /usr/bin/protoc-gen-csharp-grpc
            sudo ln -s $(which grpc_python_plugin) /usr/bin/protoc-gen-python-grpc        
      - name: Generate code
        run: protoc -I=protos --csharp-grpc_out=../csharp --csharp_out=../csharp --python-grpc_out=../python --python_out=../python protos/*
        
      - name: Generate code for grpc-dotnet
        run:  touch ../grpc-dotnet/proj.csproj && echo '<Project Sdk="Microsoft.NET.Sdk">
          <PropertyGroup>
          <TargetFramework>netstandard2.1</TargetFramework>
          </PropertyGroup>
          <ItemGroup>
          <PackageReference Include="Google.Protobuf" Version="3.20.1-rc1" />
          <PackageReference Include="Grpc.Net.Client" Version="2.45.0-pre1" />
          <PackageReference Include="Grpc.Tools" Version="2.45.0-pre1" />
          <Protobuf Include="../labustsim-proto/protos/**/*.proto" ProtoRoot="protos" CompileOutputs="false" 
          OutputDir="generated"/>
          </ItemGroup>
          </Project>' >> ../grpc-dotnet/proj.csproj && dotnet build ../grpc-dotnet/proj.csproj
          && ls && ls .. && ls ../grpc-dotnet
      
      - name: Prepare Github
        run: |
            git config --global user.name 'Automation'
            git config --global user.email 'generator@github.action'
    
      - uses: actions/checkout@v2
        with:
          ref: csharp    
      - name: Save updated C# code
        run: |
          rm -f *.cs
          mv ../csharp/*.cs .   
          git add *
          if [[ -n $(git status -s) ]] 
          then
            echo "Files have changed in this revision."
            git commit -am "C# code generated based on revision $(git rev-parse --short "$GITHUB_SHA")."
            git push
          else
            echo "Files did not change in this revision."
          fi
          
      - uses: actions/checkout@v2
        with:
          ref: python    
      - name: Save updated Python code
        run: |
          rm -f *.py
          mv ../python/*.py .   
          cat << EOF > __init__.py
          import sys
          from os.path import dirname
          sys.path.insert(1, dirname(__file__))
          EOF
          git add *
          if [[ -n $(git status -s) ]] 
          then
            echo "Files have changed in this revision."
            git commit -am "Python code generated based on revision $(git rev-parse --short "$GITHUB_SHA")."
            git push
          else
            echo "Files did not change in this revision."
          fi

      - uses: actions/checkout@v2
        with:
          ref: grpc-dotnet    
      - name: Save updated C# code (dotnet)
        run: |
          rm -f *.cs
          mv ../grpc-dotnet/generated/*.cs .   
          git add *
          if [[ -n $(git status -s) ]] 
          then
            echo "Files have changed in this revision."
            git commit -am "C# code generated based on revision $(git rev-parse --short "$GITHUB_SHA")."
            git push
          else
            echo "Files did not change in this revision."
          fi
