// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: marine.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Marine {

  /// <summary>Holder for reflection information generated from marine.proto</summary>
  public static partial class MarineReflection {

    #region Descriptor
    /// <summary>File descriptor for marine.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static MarineReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "CgxtYXJpbmUucHJvdG8SBm1hcmluZRoJc3RkLnByb3RvGg5nZW9tZXRyeS5w",
            "cm90bxoQZ2VvZ3JhcGhpYy5wcm90byKEAgoDRHZsEhsKBmhlYWRlchgBIAEo",
            "CzILLnN0ZC5IZWFkZXISIwoIdmVsb2NpdHkYAiABKAsyES5nZW9tZXRyeS5W",
            "ZWN0b3IzEhoKEnZlbG9jaXR5Q292YXJpYW5jZRgDIAMoARIQCghhbHRpdHVk",
            "ZRgEIAEoARIaChJhbHRpdHVkZUNvdmFyaWFuY2UYBSABKAESOAoRdmVsb2Np",
            "dHlSZWZlcmVuY2UYByABKA4yHS5tYXJpbmUuRHZsLlZlbG9jaXR5UmVmZXJl",
            "bmNlIjcKEVZlbG9jaXR5UmVmZXJlbmNlEgsKB1VOS05PV04QABIJCgVXQVRF",
            "UhABEgoKBkJPVFRPTRACIq4BChFBSVNQb3NpdGlvblJlcG9ydBIMCgR0eXBl",
            "GAEgASgNEgwKBG1tc2kYAiABKA0SDwoHaGVhZGluZxgDIAEoAhIYChBjb3Vy",
            "c2VPdmVyR3JvdW5kGAQgASgCEhcKD3NwZWVkT3Zlckdyb3VuZBgFIAEoAhIR",
            "Cgl0aW1lc3RhbXAYBiABKA0SJgoIZ2VvcG9pbnQYByABKAsyFC5nZW9ncmFw",
            "aGljLkdlb1BvaW50YgZwcm90bzM="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::Std.StdReflection.Descriptor, global::Geometry.GeometryReflection.Descriptor, global::Geographic.GeographicReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Marine.Dvl), global::Marine.Dvl.Parser, new[]{ "Header", "Velocity", "VelocityCovariance", "Altitude", "AltitudeCovariance", "VelocityReference" }, null, new[]{ typeof(global::Marine.Dvl.Types.VelocityReference) }, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Marine.AISPositionReport), global::Marine.AISPositionReport.Parser, new[]{ "Type", "Mmsi", "Heading", "CourseOverGround", "SpeedOverGround", "Timestamp", "Geopoint" }, null, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class Dvl : pb::IMessage<Dvl>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<Dvl> _parser = new pb::MessageParser<Dvl>(() => new Dvl());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<Dvl> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Marine.MarineReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public Dvl() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public Dvl(Dvl other) : this() {
      header_ = other.header_ != null ? other.header_.Clone() : null;
      velocity_ = other.velocity_ != null ? other.velocity_.Clone() : null;
      velocityCovariance_ = other.velocityCovariance_.Clone();
      altitude_ = other.altitude_;
      altitudeCovariance_ = other.altitudeCovariance_;
      velocityReference_ = other.velocityReference_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public Dvl Clone() {
      return new Dvl(this);
    }

    /// <summary>Field number for the "header" field.</summary>
    public const int HeaderFieldNumber = 1;
    private global::Std.Header header_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Std.Header Header {
      get { return header_; }
      set {
        header_ = value;
      }
    }

    /// <summary>Field number for the "velocity" field.</summary>
    public const int VelocityFieldNumber = 2;
    private global::Geometry.Vector3 velocity_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Geometry.Vector3 Velocity {
      get { return velocity_; }
      set {
        velocity_ = value;
      }
    }

    /// <summary>Field number for the "velocityCovariance" field.</summary>
    public const int VelocityCovarianceFieldNumber = 3;
    private static readonly pb::FieldCodec<double> _repeated_velocityCovariance_codec
        = pb::FieldCodec.ForDouble(26);
    private readonly pbc::RepeatedField<double> velocityCovariance_ = new pbc::RepeatedField<double>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<double> VelocityCovariance {
      get { return velocityCovariance_; }
    }

    /// <summary>Field number for the "altitude" field.</summary>
    public const int AltitudeFieldNumber = 4;
    private double altitude_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double Altitude {
      get { return altitude_; }
      set {
        altitude_ = value;
      }
    }

    /// <summary>Field number for the "altitudeCovariance" field.</summary>
    public const int AltitudeCovarianceFieldNumber = 5;
    private double altitudeCovariance_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double AltitudeCovariance {
      get { return altitudeCovariance_; }
      set {
        altitudeCovariance_ = value;
      }
    }

    /// <summary>Field number for the "velocityReference" field.</summary>
    public const int VelocityReferenceFieldNumber = 7;
    private global::Marine.Dvl.Types.VelocityReference velocityReference_ = global::Marine.Dvl.Types.VelocityReference.Unknown;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Marine.Dvl.Types.VelocityReference VelocityReference {
      get { return velocityReference_; }
      set {
        velocityReference_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as Dvl);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(Dvl other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Header, other.Header)) return false;
      if (!object.Equals(Velocity, other.Velocity)) return false;
      if(!velocityCovariance_.Equals(other.velocityCovariance_)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(Altitude, other.Altitude)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(AltitudeCovariance, other.AltitudeCovariance)) return false;
      if (VelocityReference != other.VelocityReference) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (header_ != null) hash ^= Header.GetHashCode();
      if (velocity_ != null) hash ^= Velocity.GetHashCode();
      hash ^= velocityCovariance_.GetHashCode();
      if (Altitude != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(Altitude);
      if (AltitudeCovariance != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(AltitudeCovariance);
      if (VelocityReference != global::Marine.Dvl.Types.VelocityReference.Unknown) hash ^= VelocityReference.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (header_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Header);
      }
      if (velocity_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Velocity);
      }
      velocityCovariance_.WriteTo(output, _repeated_velocityCovariance_codec);
      if (Altitude != 0D) {
        output.WriteRawTag(33);
        output.WriteDouble(Altitude);
      }
      if (AltitudeCovariance != 0D) {
        output.WriteRawTag(41);
        output.WriteDouble(AltitudeCovariance);
      }
      if (VelocityReference != global::Marine.Dvl.Types.VelocityReference.Unknown) {
        output.WriteRawTag(56);
        output.WriteEnum((int) VelocityReference);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (header_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Header);
      }
      if (velocity_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Velocity);
      }
      velocityCovariance_.WriteTo(ref output, _repeated_velocityCovariance_codec);
      if (Altitude != 0D) {
        output.WriteRawTag(33);
        output.WriteDouble(Altitude);
      }
      if (AltitudeCovariance != 0D) {
        output.WriteRawTag(41);
        output.WriteDouble(AltitudeCovariance);
      }
      if (VelocityReference != global::Marine.Dvl.Types.VelocityReference.Unknown) {
        output.WriteRawTag(56);
        output.WriteEnum((int) VelocityReference);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (header_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Header);
      }
      if (velocity_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Velocity);
      }
      size += velocityCovariance_.CalculateSize(_repeated_velocityCovariance_codec);
      if (Altitude != 0D) {
        size += 1 + 8;
      }
      if (AltitudeCovariance != 0D) {
        size += 1 + 8;
      }
      if (VelocityReference != global::Marine.Dvl.Types.VelocityReference.Unknown) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) VelocityReference);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(Dvl other) {
      if (other == null) {
        return;
      }
      if (other.header_ != null) {
        if (header_ == null) {
          Header = new global::Std.Header();
        }
        Header.MergeFrom(other.Header);
      }
      if (other.velocity_ != null) {
        if (velocity_ == null) {
          Velocity = new global::Geometry.Vector3();
        }
        Velocity.MergeFrom(other.Velocity);
      }
      velocityCovariance_.Add(other.velocityCovariance_);
      if (other.Altitude != 0D) {
        Altitude = other.Altitude;
      }
      if (other.AltitudeCovariance != 0D) {
        AltitudeCovariance = other.AltitudeCovariance;
      }
      if (other.VelocityReference != global::Marine.Dvl.Types.VelocityReference.Unknown) {
        VelocityReference = other.VelocityReference;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (header_ == null) {
              Header = new global::Std.Header();
            }
            input.ReadMessage(Header);
            break;
          }
          case 18: {
            if (velocity_ == null) {
              Velocity = new global::Geometry.Vector3();
            }
            input.ReadMessage(Velocity);
            break;
          }
          case 26:
          case 25: {
            velocityCovariance_.AddEntriesFrom(input, _repeated_velocityCovariance_codec);
            break;
          }
          case 33: {
            Altitude = input.ReadDouble();
            break;
          }
          case 41: {
            AltitudeCovariance = input.ReadDouble();
            break;
          }
          case 56: {
            VelocityReference = (global::Marine.Dvl.Types.VelocityReference) input.ReadEnum();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            if (header_ == null) {
              Header = new global::Std.Header();
            }
            input.ReadMessage(Header);
            break;
          }
          case 18: {
            if (velocity_ == null) {
              Velocity = new global::Geometry.Vector3();
            }
            input.ReadMessage(Velocity);
            break;
          }
          case 26:
          case 25: {
            velocityCovariance_.AddEntriesFrom(ref input, _repeated_velocityCovariance_codec);
            break;
          }
          case 33: {
            Altitude = input.ReadDouble();
            break;
          }
          case 41: {
            AltitudeCovariance = input.ReadDouble();
            break;
          }
          case 56: {
            VelocityReference = (global::Marine.Dvl.Types.VelocityReference) input.ReadEnum();
            break;
          }
        }
      }
    }
    #endif

    #region Nested types
    /// <summary>Container for nested types declared in the Dvl message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static partial class Types {
      public enum VelocityReference {
        [pbr::OriginalName("UNKNOWN")] Unknown = 0,
        [pbr::OriginalName("WATER")] Water = 1,
        [pbr::OriginalName("BOTTOM")] Bottom = 2,
      }

    }
    #endregion

  }

  public sealed partial class AISPositionReport : pb::IMessage<AISPositionReport>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<AISPositionReport> _parser = new pb::MessageParser<AISPositionReport>(() => new AISPositionReport());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<AISPositionReport> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Marine.MarineReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public AISPositionReport() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public AISPositionReport(AISPositionReport other) : this() {
      type_ = other.type_;
      mmsi_ = other.mmsi_;
      heading_ = other.heading_;
      courseOverGround_ = other.courseOverGround_;
      speedOverGround_ = other.speedOverGround_;
      timestamp_ = other.timestamp_;
      geopoint_ = other.geopoint_ != null ? other.geopoint_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public AISPositionReport Clone() {
      return new AISPositionReport(this);
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 1;
    private uint type_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public uint Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    /// <summary>Field number for the "mmsi" field.</summary>
    public const int MmsiFieldNumber = 2;
    private uint mmsi_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public uint Mmsi {
      get { return mmsi_; }
      set {
        mmsi_ = value;
      }
    }

    /// <summary>Field number for the "heading" field.</summary>
    public const int HeadingFieldNumber = 3;
    private float heading_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float Heading {
      get { return heading_; }
      set {
        heading_ = value;
      }
    }

    /// <summary>Field number for the "courseOverGround" field.</summary>
    public const int CourseOverGroundFieldNumber = 4;
    private float courseOverGround_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float CourseOverGround {
      get { return courseOverGround_; }
      set {
        courseOverGround_ = value;
      }
    }

    /// <summary>Field number for the "speedOverGround" field.</summary>
    public const int SpeedOverGroundFieldNumber = 5;
    private float speedOverGround_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float SpeedOverGround {
      get { return speedOverGround_; }
      set {
        speedOverGround_ = value;
      }
    }

    /// <summary>Field number for the "timestamp" field.</summary>
    public const int TimestampFieldNumber = 6;
    private uint timestamp_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public uint Timestamp {
      get { return timestamp_; }
      set {
        timestamp_ = value;
      }
    }

    /// <summary>Field number for the "geopoint" field.</summary>
    public const int GeopointFieldNumber = 7;
    private global::Geographic.GeoPoint geopoint_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Geographic.GeoPoint Geopoint {
      get { return geopoint_; }
      set {
        geopoint_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as AISPositionReport);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(AISPositionReport other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Type != other.Type) return false;
      if (Mmsi != other.Mmsi) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Heading, other.Heading)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(CourseOverGround, other.CourseOverGround)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(SpeedOverGround, other.SpeedOverGround)) return false;
      if (Timestamp != other.Timestamp) return false;
      if (!object.Equals(Geopoint, other.Geopoint)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (Type != 0) hash ^= Type.GetHashCode();
      if (Mmsi != 0) hash ^= Mmsi.GetHashCode();
      if (Heading != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Heading);
      if (CourseOverGround != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(CourseOverGround);
      if (SpeedOverGround != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(SpeedOverGround);
      if (Timestamp != 0) hash ^= Timestamp.GetHashCode();
      if (geopoint_ != null) hash ^= Geopoint.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Type != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Type);
      }
      if (Mmsi != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(Mmsi);
      }
      if (Heading != 0F) {
        output.WriteRawTag(29);
        output.WriteFloat(Heading);
      }
      if (CourseOverGround != 0F) {
        output.WriteRawTag(37);
        output.WriteFloat(CourseOverGround);
      }
      if (SpeedOverGround != 0F) {
        output.WriteRawTag(45);
        output.WriteFloat(SpeedOverGround);
      }
      if (Timestamp != 0) {
        output.WriteRawTag(48);
        output.WriteUInt32(Timestamp);
      }
      if (geopoint_ != null) {
        output.WriteRawTag(58);
        output.WriteMessage(Geopoint);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Type != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Type);
      }
      if (Mmsi != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(Mmsi);
      }
      if (Heading != 0F) {
        output.WriteRawTag(29);
        output.WriteFloat(Heading);
      }
      if (CourseOverGround != 0F) {
        output.WriteRawTag(37);
        output.WriteFloat(CourseOverGround);
      }
      if (SpeedOverGround != 0F) {
        output.WriteRawTag(45);
        output.WriteFloat(SpeedOverGround);
      }
      if (Timestamp != 0) {
        output.WriteRawTag(48);
        output.WriteUInt32(Timestamp);
      }
      if (geopoint_ != null) {
        output.WriteRawTag(58);
        output.WriteMessage(Geopoint);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (Type != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Type);
      }
      if (Mmsi != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Mmsi);
      }
      if (Heading != 0F) {
        size += 1 + 4;
      }
      if (CourseOverGround != 0F) {
        size += 1 + 4;
      }
      if (SpeedOverGround != 0F) {
        size += 1 + 4;
      }
      if (Timestamp != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Timestamp);
      }
      if (geopoint_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Geopoint);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(AISPositionReport other) {
      if (other == null) {
        return;
      }
      if (other.Type != 0) {
        Type = other.Type;
      }
      if (other.Mmsi != 0) {
        Mmsi = other.Mmsi;
      }
      if (other.Heading != 0F) {
        Heading = other.Heading;
      }
      if (other.CourseOverGround != 0F) {
        CourseOverGround = other.CourseOverGround;
      }
      if (other.SpeedOverGround != 0F) {
        SpeedOverGround = other.SpeedOverGround;
      }
      if (other.Timestamp != 0) {
        Timestamp = other.Timestamp;
      }
      if (other.geopoint_ != null) {
        if (geopoint_ == null) {
          Geopoint = new global::Geographic.GeoPoint();
        }
        Geopoint.MergeFrom(other.Geopoint);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Type = input.ReadUInt32();
            break;
          }
          case 16: {
            Mmsi = input.ReadUInt32();
            break;
          }
          case 29: {
            Heading = input.ReadFloat();
            break;
          }
          case 37: {
            CourseOverGround = input.ReadFloat();
            break;
          }
          case 45: {
            SpeedOverGround = input.ReadFloat();
            break;
          }
          case 48: {
            Timestamp = input.ReadUInt32();
            break;
          }
          case 58: {
            if (geopoint_ == null) {
              Geopoint = new global::Geographic.GeoPoint();
            }
            input.ReadMessage(Geopoint);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Type = input.ReadUInt32();
            break;
          }
          case 16: {
            Mmsi = input.ReadUInt32();
            break;
          }
          case 29: {
            Heading = input.ReadFloat();
            break;
          }
          case 37: {
            CourseOverGround = input.ReadFloat();
            break;
          }
          case 45: {
            SpeedOverGround = input.ReadFloat();
            break;
          }
          case 48: {
            Timestamp = input.ReadUInt32();
            break;
          }
          case 58: {
            if (geopoint_ == null) {
              Geopoint = new global::Geographic.GeoPoint();
            }
            input.ReadMessage(Geopoint);
            break;
          }
        }
      }
    }
    #endif

  }

  #endregion

}

#endregion Designer generated code
