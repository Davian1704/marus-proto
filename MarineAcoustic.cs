// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: marine_acoustic.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace MarineAcoustic {

  /// <summary>Holder for reflection information generated from marine_acoustic.proto</summary>
  public static partial class MarineAcousticReflection {

    #region Descriptor
    /// <summary>File descriptor for marine_acoustic.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static MarineAcousticReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChVtYXJpbmVfYWNvdXN0aWMucHJvdG8SD21hcmluZV9hY291c3RpYxoJc3Rk",
            "LnByb3RvGg5nZW9tZXRyeS5wcm90byJgCghQaW5nSW5mbxIRCglmcmVxdWVu",
            "Y3kYASABKAISEwoLc291bmRfc3BlZWQYAiABKAISFQoNdHhfYmVhbXdpZHRo",
            "cxgDIAMoAhIVCg1yeF9iZWFtd2lkdGhzGAQgAygCIlcKDlNvbmFySW1hZ2VE",
            "YXRhEhQKDGlzX2JpZ2VuZGlhbhgBIAEoCBINCgVkdHlwZRgCIAEoDRISCgpi",
            "ZWFtX2NvdW50GAMgASgNEgwKBGRhdGEYBCADKAwizAEKE1Byb2plY3RlZFNv",
            "bmFySW1hZ2USGwoGaGVhZGVyGAEgASgLMgsuc3RkLkhlYWRlchIsCglwaW5n",
            "X2luZm8YAiABKAsyGS5tYXJpbmVfYWNvdXN0aWMuUGluZ0luZm8SKgoPYmVh",
            "bV9kaXJlY3Rpb25zGAMgAygLMhEuZ2VvbWV0cnkuVmVjdG9yMxIOCgZyYW5n",
            "ZXMYBCADKAISLgoFaW1hZ2UYBSABKAsyHy5tYXJpbmVfYWNvdXN0aWMuU29u",
            "YXJJbWFnZURhdGFiBnByb3RvMw=="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::Std.StdReflection.Descriptor, global::Geometry.GeometryReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::MarineAcoustic.PingInfo), global::MarineAcoustic.PingInfo.Parser, new[]{ "Frequency", "SoundSpeed", "TxBeamwidths", "RxBeamwidths" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::MarineAcoustic.SonarImageData), global::MarineAcoustic.SonarImageData.Parser, new[]{ "IsBigendian", "Dtype", "BeamCount", "Data" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::MarineAcoustic.ProjectedSonarImage), global::MarineAcoustic.ProjectedSonarImage.Parser, new[]{ "Header", "PingInfo", "BeamDirections", "Ranges", "Image" }, null, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class PingInfo : pb::IMessage<PingInfo> {
    private static readonly pb::MessageParser<PingInfo> _parser = new pb::MessageParser<PingInfo>(() => new PingInfo());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PingInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::MarineAcoustic.MarineAcousticReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PingInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PingInfo(PingInfo other) : this() {
      frequency_ = other.frequency_;
      soundSpeed_ = other.soundSpeed_;
      txBeamwidths_ = other.txBeamwidths_.Clone();
      rxBeamwidths_ = other.rxBeamwidths_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PingInfo Clone() {
      return new PingInfo(this);
    }

    /// <summary>Field number for the "frequency" field.</summary>
    public const int FrequencyFieldNumber = 1;
    private float frequency_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Frequency {
      get { return frequency_; }
      set {
        frequency_ = value;
      }
    }

    /// <summary>Field number for the "sound_speed" field.</summary>
    public const int SoundSpeedFieldNumber = 2;
    private float soundSpeed_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float SoundSpeed {
      get { return soundSpeed_; }
      set {
        soundSpeed_ = value;
      }
    }

    /// <summary>Field number for the "tx_beamwidths" field.</summary>
    public const int TxBeamwidthsFieldNumber = 3;
    private static readonly pb::FieldCodec<float> _repeated_txBeamwidths_codec
        = pb::FieldCodec.ForFloat(26);
    private readonly pbc::RepeatedField<float> txBeamwidths_ = new pbc::RepeatedField<float>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<float> TxBeamwidths {
      get { return txBeamwidths_; }
    }

    /// <summary>Field number for the "rx_beamwidths" field.</summary>
    public const int RxBeamwidthsFieldNumber = 4;
    private static readonly pb::FieldCodec<float> _repeated_rxBeamwidths_codec
        = pb::FieldCodec.ForFloat(34);
    private readonly pbc::RepeatedField<float> rxBeamwidths_ = new pbc::RepeatedField<float>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<float> RxBeamwidths {
      get { return rxBeamwidths_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PingInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PingInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Frequency, other.Frequency)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(SoundSpeed, other.SoundSpeed)) return false;
      if(!txBeamwidths_.Equals(other.txBeamwidths_)) return false;
      if(!rxBeamwidths_.Equals(other.rxBeamwidths_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Frequency != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Frequency);
      if (SoundSpeed != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(SoundSpeed);
      hash ^= txBeamwidths_.GetHashCode();
      hash ^= rxBeamwidths_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Frequency != 0F) {
        output.WriteRawTag(13);
        output.WriteFloat(Frequency);
      }
      if (SoundSpeed != 0F) {
        output.WriteRawTag(21);
        output.WriteFloat(SoundSpeed);
      }
      txBeamwidths_.WriteTo(output, _repeated_txBeamwidths_codec);
      rxBeamwidths_.WriteTo(output, _repeated_rxBeamwidths_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Frequency != 0F) {
        size += 1 + 4;
      }
      if (SoundSpeed != 0F) {
        size += 1 + 4;
      }
      size += txBeamwidths_.CalculateSize(_repeated_txBeamwidths_codec);
      size += rxBeamwidths_.CalculateSize(_repeated_rxBeamwidths_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PingInfo other) {
      if (other == null) {
        return;
      }
      if (other.Frequency != 0F) {
        Frequency = other.Frequency;
      }
      if (other.SoundSpeed != 0F) {
        SoundSpeed = other.SoundSpeed;
      }
      txBeamwidths_.Add(other.txBeamwidths_);
      rxBeamwidths_.Add(other.rxBeamwidths_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 13: {
            Frequency = input.ReadFloat();
            break;
          }
          case 21: {
            SoundSpeed = input.ReadFloat();
            break;
          }
          case 26:
          case 29: {
            txBeamwidths_.AddEntriesFrom(input, _repeated_txBeamwidths_codec);
            break;
          }
          case 34:
          case 37: {
            rxBeamwidths_.AddEntriesFrom(input, _repeated_rxBeamwidths_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class SonarImageData : pb::IMessage<SonarImageData> {
    private static readonly pb::MessageParser<SonarImageData> _parser = new pb::MessageParser<SonarImageData>(() => new SonarImageData());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SonarImageData> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::MarineAcoustic.MarineAcousticReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SonarImageData() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SonarImageData(SonarImageData other) : this() {
      isBigendian_ = other.isBigendian_;
      dtype_ = other.dtype_;
      beamCount_ = other.beamCount_;
      data_ = other.data_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SonarImageData Clone() {
      return new SonarImageData(this);
    }

    /// <summary>Field number for the "is_bigendian" field.</summary>
    public const int IsBigendianFieldNumber = 1;
    private bool isBigendian_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsBigendian {
      get { return isBigendian_; }
      set {
        isBigendian_ = value;
      }
    }

    /// <summary>Field number for the "dtype" field.</summary>
    public const int DtypeFieldNumber = 2;
    private uint dtype_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Dtype {
      get { return dtype_; }
      set {
        dtype_ = value;
      }
    }

    /// <summary>Field number for the "beam_count" field.</summary>
    public const int BeamCountFieldNumber = 3;
    private uint beamCount_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint BeamCount {
      get { return beamCount_; }
      set {
        beamCount_ = value;
      }
    }

    /// <summary>Field number for the "data" field.</summary>
    public const int DataFieldNumber = 4;
    private static readonly pb::FieldCodec<pb::ByteString> _repeated_data_codec
        = pb::FieldCodec.ForBytes(34);
    private readonly pbc::RepeatedField<pb::ByteString> data_ = new pbc::RepeatedField<pb::ByteString>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<pb::ByteString> Data {
      get { return data_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SonarImageData);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SonarImageData other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (IsBigendian != other.IsBigendian) return false;
      if (Dtype != other.Dtype) return false;
      if (BeamCount != other.BeamCount) return false;
      if(!data_.Equals(other.data_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (IsBigendian != false) hash ^= IsBigendian.GetHashCode();
      if (Dtype != 0) hash ^= Dtype.GetHashCode();
      if (BeamCount != 0) hash ^= BeamCount.GetHashCode();
      hash ^= data_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (IsBigendian != false) {
        output.WriteRawTag(8);
        output.WriteBool(IsBigendian);
      }
      if (Dtype != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(Dtype);
      }
      if (BeamCount != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(BeamCount);
      }
      data_.WriteTo(output, _repeated_data_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (IsBigendian != false) {
        size += 1 + 1;
      }
      if (Dtype != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Dtype);
      }
      if (BeamCount != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(BeamCount);
      }
      size += data_.CalculateSize(_repeated_data_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SonarImageData other) {
      if (other == null) {
        return;
      }
      if (other.IsBigendian != false) {
        IsBigendian = other.IsBigendian;
      }
      if (other.Dtype != 0) {
        Dtype = other.Dtype;
      }
      if (other.BeamCount != 0) {
        BeamCount = other.BeamCount;
      }
      data_.Add(other.data_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            IsBigendian = input.ReadBool();
            break;
          }
          case 16: {
            Dtype = input.ReadUInt32();
            break;
          }
          case 24: {
            BeamCount = input.ReadUInt32();
            break;
          }
          case 34: {
            data_.AddEntriesFrom(input, _repeated_data_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class ProjectedSonarImage : pb::IMessage<ProjectedSonarImage> {
    private static readonly pb::MessageParser<ProjectedSonarImage> _parser = new pb::MessageParser<ProjectedSonarImage>(() => new ProjectedSonarImage());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ProjectedSonarImage> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::MarineAcoustic.MarineAcousticReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ProjectedSonarImage() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ProjectedSonarImage(ProjectedSonarImage other) : this() {
      header_ = other.header_ != null ? other.header_.Clone() : null;
      pingInfo_ = other.pingInfo_ != null ? other.pingInfo_.Clone() : null;
      beamDirections_ = other.beamDirections_.Clone();
      ranges_ = other.ranges_.Clone();
      image_ = other.image_ != null ? other.image_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ProjectedSonarImage Clone() {
      return new ProjectedSonarImage(this);
    }

    /// <summary>Field number for the "header" field.</summary>
    public const int HeaderFieldNumber = 1;
    private global::Std.Header header_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Std.Header Header {
      get { return header_; }
      set {
        header_ = value;
      }
    }

    /// <summary>Field number for the "ping_info" field.</summary>
    public const int PingInfoFieldNumber = 2;
    private global::MarineAcoustic.PingInfo pingInfo_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::MarineAcoustic.PingInfo PingInfo {
      get { return pingInfo_; }
      set {
        pingInfo_ = value;
      }
    }

    /// <summary>Field number for the "beam_directions" field.</summary>
    public const int BeamDirectionsFieldNumber = 3;
    private static readonly pb::FieldCodec<global::Geometry.Vector3> _repeated_beamDirections_codec
        = pb::FieldCodec.ForMessage(26, global::Geometry.Vector3.Parser);
    private readonly pbc::RepeatedField<global::Geometry.Vector3> beamDirections_ = new pbc::RepeatedField<global::Geometry.Vector3>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Geometry.Vector3> BeamDirections {
      get { return beamDirections_; }
    }

    /// <summary>Field number for the "ranges" field.</summary>
    public const int RangesFieldNumber = 4;
    private static readonly pb::FieldCodec<float> _repeated_ranges_codec
        = pb::FieldCodec.ForFloat(34);
    private readonly pbc::RepeatedField<float> ranges_ = new pbc::RepeatedField<float>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<float> Ranges {
      get { return ranges_; }
    }

    /// <summary>Field number for the "image" field.</summary>
    public const int ImageFieldNumber = 5;
    private global::MarineAcoustic.SonarImageData image_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::MarineAcoustic.SonarImageData Image {
      get { return image_; }
      set {
        image_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ProjectedSonarImage);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ProjectedSonarImage other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Header, other.Header)) return false;
      if (!object.Equals(PingInfo, other.PingInfo)) return false;
      if(!beamDirections_.Equals(other.beamDirections_)) return false;
      if(!ranges_.Equals(other.ranges_)) return false;
      if (!object.Equals(Image, other.Image)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (header_ != null) hash ^= Header.GetHashCode();
      if (pingInfo_ != null) hash ^= PingInfo.GetHashCode();
      hash ^= beamDirections_.GetHashCode();
      hash ^= ranges_.GetHashCode();
      if (image_ != null) hash ^= Image.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (header_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Header);
      }
      if (pingInfo_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(PingInfo);
      }
      beamDirections_.WriteTo(output, _repeated_beamDirections_codec);
      ranges_.WriteTo(output, _repeated_ranges_codec);
      if (image_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(Image);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (header_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Header);
      }
      if (pingInfo_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(PingInfo);
      }
      size += beamDirections_.CalculateSize(_repeated_beamDirections_codec);
      size += ranges_.CalculateSize(_repeated_ranges_codec);
      if (image_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Image);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ProjectedSonarImage other) {
      if (other == null) {
        return;
      }
      if (other.header_ != null) {
        if (header_ == null) {
          Header = new global::Std.Header();
        }
        Header.MergeFrom(other.Header);
      }
      if (other.pingInfo_ != null) {
        if (pingInfo_ == null) {
          PingInfo = new global::MarineAcoustic.PingInfo();
        }
        PingInfo.MergeFrom(other.PingInfo);
      }
      beamDirections_.Add(other.beamDirections_);
      ranges_.Add(other.ranges_);
      if (other.image_ != null) {
        if (image_ == null) {
          Image = new global::MarineAcoustic.SonarImageData();
        }
        Image.MergeFrom(other.Image);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (header_ == null) {
              Header = new global::Std.Header();
            }
            input.ReadMessage(Header);
            break;
          }
          case 18: {
            if (pingInfo_ == null) {
              PingInfo = new global::MarineAcoustic.PingInfo();
            }
            input.ReadMessage(PingInfo);
            break;
          }
          case 26: {
            beamDirections_.AddEntriesFrom(input, _repeated_beamDirections_codec);
            break;
          }
          case 34:
          case 37: {
            ranges_.AddEntriesFrom(input, _repeated_ranges_codec);
            break;
          }
          case 42: {
            if (image_ == null) {
              Image = new global::MarineAcoustic.SonarImageData();
            }
            input.ReadMessage(Image);
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
