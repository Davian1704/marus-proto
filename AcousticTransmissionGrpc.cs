// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: acoustic_transmission.proto
// </auto-generated>
#pragma warning disable 0414, 1591
#region Designer generated code

using grpc = global::Grpc.Core;

namespace Acoustictransmission {
  public static partial class AcousticTransmission
  {
    static readonly string __ServiceName = "acoustictransmission.AcousticTransmission";

    static readonly grpc::Marshaller<global::Acoustictransmission.CommandRequest> __Marshaller_acoustictransmission_CommandRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Acoustictransmission.CommandRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Acoustictransmission.AcousticResponse> __Marshaller_acoustictransmission_AcousticResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Acoustictransmission.AcousticResponse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Acoustictransmission.AcousticPayload> __Marshaller_acoustictransmission_AcousticPayload = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Acoustictransmission.AcousticPayload.Parser.ParseFrom);

    static readonly grpc::Method<global::Acoustictransmission.CommandRequest, global::Acoustictransmission.AcousticResponse> __Method_GetAcousticRequest = new grpc::Method<global::Acoustictransmission.CommandRequest, global::Acoustictransmission.AcousticResponse>(
        grpc::MethodType.ServerStreaming,
        __ServiceName,
        "GetAcousticRequest",
        __Marshaller_acoustictransmission_CommandRequest,
        __Marshaller_acoustictransmission_AcousticResponse);

    static readonly grpc::Method<global::Acoustictransmission.AcousticPayload, global::Acoustictransmission.AcousticResponse> __Method_ReturnAcousticPayload = new grpc::Method<global::Acoustictransmission.AcousticPayload, global::Acoustictransmission.AcousticResponse>(
        grpc::MethodType.ServerStreaming,
        __ServiceName,
        "ReturnAcousticPayload",
        __Marshaller_acoustictransmission_AcousticPayload,
        __Marshaller_acoustictransmission_AcousticResponse);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::Acoustictransmission.AcousticTransmissionReflection.Descriptor.Services[0]; }
    }

    /// <summary>Base class for server-side implementations of AcousticTransmission</summary>
    public abstract partial class AcousticTransmissionBase
    {
      public virtual global::System.Threading.Tasks.Task GetAcousticRequest(global::Acoustictransmission.CommandRequest request, grpc::IServerStreamWriter<global::Acoustictransmission.AcousticResponse> responseStream, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task ReturnAcousticPayload(global::Acoustictransmission.AcousticPayload request, grpc::IServerStreamWriter<global::Acoustictransmission.AcousticResponse> responseStream, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

    }

    /// <summary>Client for AcousticTransmission</summary>
    public partial class AcousticTransmissionClient : grpc::ClientBase<AcousticTransmissionClient>
    {
      /// <summary>Creates a new client for AcousticTransmission</summary>
      /// <param name="channel">The channel to use to make remote calls.</param>
      public AcousticTransmissionClient(grpc::Channel channel) : base(channel)
      {
      }
      /// <summary>Creates a new client for AcousticTransmission that uses a custom <c>CallInvoker</c>.</summary>
      /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
      public AcousticTransmissionClient(grpc::CallInvoker callInvoker) : base(callInvoker)
      {
      }
      /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      protected AcousticTransmissionClient() : base()
      {
      }
      /// <summary>Protected constructor to allow creation of configured clients.</summary>
      /// <param name="configuration">The client configuration.</param>
      protected AcousticTransmissionClient(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      public virtual grpc::AsyncServerStreamingCall<global::Acoustictransmission.AcousticResponse> GetAcousticRequest(global::Acoustictransmission.CommandRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetAcousticRequest(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncServerStreamingCall<global::Acoustictransmission.AcousticResponse> GetAcousticRequest(global::Acoustictransmission.CommandRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncServerStreamingCall(__Method_GetAcousticRequest, null, options, request);
      }
      public virtual grpc::AsyncServerStreamingCall<global::Acoustictransmission.AcousticResponse> ReturnAcousticPayload(global::Acoustictransmission.AcousticPayload request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ReturnAcousticPayload(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncServerStreamingCall<global::Acoustictransmission.AcousticResponse> ReturnAcousticPayload(global::Acoustictransmission.AcousticPayload request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncServerStreamingCall(__Method_ReturnAcousticPayload, null, options, request);
      }
      /// <summary>Creates a new instance of client from given <c>ClientBaseConfiguration</c>.</summary>
      protected override AcousticTransmissionClient NewInstance(ClientBaseConfiguration configuration)
      {
        return new AcousticTransmissionClient(configuration);
      }
    }

    /// <summary>Creates service definition that can be registered with a server</summary>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static grpc::ServerServiceDefinition BindService(AcousticTransmissionBase serviceImpl)
    {
      return grpc::ServerServiceDefinition.CreateBuilder()
          .AddMethod(__Method_GetAcousticRequest, serviceImpl.GetAcousticRequest)
          .AddMethod(__Method_ReturnAcousticPayload, serviceImpl.ReturnAcousticPayload).Build();
    }

  }
}
#endregion
