// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: sensor_management.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Sensormanagement {

  /// <summary>Holder for reflection information generated from sensor_management.proto</summary>
  public static partial class SensorManagementReflection {

    #region Descriptor
    /// <summary>File descriptor for sensor_management.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static SensorManagementReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChdzZW5zb3JfbWFuYWdlbWVudC5wcm90bxIQc2Vuc29ybWFuYWdlbWVudBoM",
            "Y29tbW9uLnByb3RvIikKFVN0YXJ0UmVuZGVyaW5nUmVxdWVzdBIQCghzZW5z",
            "b3JJRBgBIAEoBSIpChZTdGFydFJlbmRlcmluZ1Jlc3BvbnNlEg8KB3N1Y2Nl",
            "c3MYASABKAgiKAoUU3RvcFJlbmRlcmluZ1JlcXVlc3QSEAoIc2Vuc29ySUQY",
            "ASABKAUiKAoVU3RvcFJlbmRlcmluZ1Jlc3BvbnNlEg8KB3N1Y2Nlc3MYASAB",
            "KAgiRQoXQWxsU2Vuc29yc09mVHlwZVJlcXVlc3QSKgoEdHlwZRgBIAEoDjIc",
            "LnNlbnNvcm1hbmFnZW1lbnQuU2Vuc29yVHlwZSJFChhBbGxTZW5zb3JzT2ZU",
            "eXBlUmVzcG9uc2USKQoHc2Vuc29ycxgBIAMoCzIYLnNlbnNvcm1hbmFnZW1l",
            "bnQuU2Vuc29yIi0KGUFsbFNlbnNvcnNPblZlc3NlbFJlcXVlc3QSEAoIdmVz",
            "c2VsSUQYASABKAkiRwoaQWxsU2Vuc29yc09uVmVzc2VsUmVzcG9uc2USKQoH",
            "c2Vuc29ycxgBIAMoCzIYLnNlbnNvcm1hbmFnZW1lbnQuU2Vuc29yIowBCgZT",
            "ZW5zb3ISCgoCaWQYASABKAUSKgoEdHlwZRgCIAEoDjIcLnNlbnNvcm1hbmFn",
            "ZW1lbnQuU2Vuc29yVHlwZRITCgtzZW5zb3JXaWR0aBgDIAEoBRIUCgxzZW5z",
            "b3JIZWlnaHQYBCABKAUSEQoJaXBBZGRyZXNzGAUgASgJEgwKBHBvcnQYBiAB",
            "KAUqSgoKU2Vuc29yVHlwZRILCgdVTktOT1dOEAASCwoHT1BUSUNBTBABEgwK",
            "CElORlJBUkVEEAISCQoFUkFEQVIQAxIJCgVMSURBUhAEMsMDChBTZW5zb3JN",
            "YW5hZ2VtZW50EmUKDlN0YXJ0UmVuZGVyaW5nEicuc2Vuc29ybWFuYWdlbWVu",
            "dC5TdGFydFJlbmRlcmluZ1JlcXVlc3QaKC5zZW5zb3JtYW5hZ2VtZW50LlN0",
            "YXJ0UmVuZGVyaW5nUmVzcG9uc2UiABJiCg1TdG9wUmVuZGVyaW5nEiYuc2Vu",
            "c29ybWFuYWdlbWVudC5TdG9wUmVuZGVyaW5nUmVxdWVzdBonLnNlbnNvcm1h",
            "bmFnZW1lbnQuU3RvcFJlbmRlcmluZ1Jlc3BvbnNlIgASbgoTR2V0QWxsU2Vu",
            "c29yc09mVHlwZRIpLnNlbnNvcm1hbmFnZW1lbnQuQWxsU2Vuc29yc09mVHlw",
            "ZVJlcXVlc3QaKi5zZW5zb3JtYW5hZ2VtZW50LkFsbFNlbnNvcnNPZlR5cGVS",
            "ZXNwb25zZSIAEnQKFUdldEFsbFNlbnNvcnNPblZlc3NlbBIrLnNlbnNvcm1h",
            "bmFnZW1lbnQuQWxsU2Vuc29yc09uVmVzc2VsUmVxdWVzdBosLnNlbnNvcm1h",
            "bmFnZW1lbnQuQWxsU2Vuc29yc09uVmVzc2VsUmVzcG9uc2UiAEI9CiFpby5n",
            "cnBjLmV4YW1wbGVzLnNlbnNvcm1hbmFnZW1lbnRCEFNlbnNvck1hbmFnZW1l",
            "bnRQAaICA0hMV2IGcHJvdG8z"));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::Common.CommonReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(new[] {typeof(global::Sensormanagement.SensorType), }, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Sensormanagement.StartRenderingRequest), global::Sensormanagement.StartRenderingRequest.Parser, new[]{ "SensorID" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Sensormanagement.StartRenderingResponse), global::Sensormanagement.StartRenderingResponse.Parser, new[]{ "Success" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Sensormanagement.StopRenderingRequest), global::Sensormanagement.StopRenderingRequest.Parser, new[]{ "SensorID" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Sensormanagement.StopRenderingResponse), global::Sensormanagement.StopRenderingResponse.Parser, new[]{ "Success" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Sensormanagement.AllSensorsOfTypeRequest), global::Sensormanagement.AllSensorsOfTypeRequest.Parser, new[]{ "Type" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Sensormanagement.AllSensorsOfTypeResponse), global::Sensormanagement.AllSensorsOfTypeResponse.Parser, new[]{ "Sensors" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Sensormanagement.AllSensorsOnVesselRequest), global::Sensormanagement.AllSensorsOnVesselRequest.Parser, new[]{ "VesselID" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Sensormanagement.AllSensorsOnVesselResponse), global::Sensormanagement.AllSensorsOnVesselResponse.Parser, new[]{ "Sensors" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Sensormanagement.Sensor), global::Sensormanagement.Sensor.Parser, new[]{ "Id", "Type", "SensorWidth", "SensorHeight", "IpAddress", "Port" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Enums
  public enum SensorType {
    [pbr::OriginalName("UNKNOWN")] Unknown = 0,
    [pbr::OriginalName("OPTICAL")] Optical = 1,
    [pbr::OriginalName("INFRARED")] Infrared = 2,
    [pbr::OriginalName("RADAR")] Radar = 3,
    [pbr::OriginalName("LIDAR")] Lidar = 4,
  }

  #endregion

  #region Messages
  public sealed partial class StartRenderingRequest : pb::IMessage<StartRenderingRequest> {
    private static readonly pb::MessageParser<StartRenderingRequest> _parser = new pb::MessageParser<StartRenderingRequest>(() => new StartRenderingRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<StartRenderingRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Sensormanagement.SensorManagementReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StartRenderingRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StartRenderingRequest(StartRenderingRequest other) : this() {
      sensorID_ = other.sensorID_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StartRenderingRequest Clone() {
      return new StartRenderingRequest(this);
    }

    /// <summary>Field number for the "sensorID" field.</summary>
    public const int SensorIDFieldNumber = 1;
    private int sensorID_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int SensorID {
      get { return sensorID_; }
      set {
        sensorID_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as StartRenderingRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(StartRenderingRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (SensorID != other.SensorID) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (SensorID != 0) hash ^= SensorID.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (SensorID != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(SensorID);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (SensorID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(SensorID);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(StartRenderingRequest other) {
      if (other == null) {
        return;
      }
      if (other.SensorID != 0) {
        SensorID = other.SensorID;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            SensorID = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class StartRenderingResponse : pb::IMessage<StartRenderingResponse> {
    private static readonly pb::MessageParser<StartRenderingResponse> _parser = new pb::MessageParser<StartRenderingResponse>(() => new StartRenderingResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<StartRenderingResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Sensormanagement.SensorManagementReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StartRenderingResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StartRenderingResponse(StartRenderingResponse other) : this() {
      success_ = other.success_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StartRenderingResponse Clone() {
      return new StartRenderingResponse(this);
    }

    /// <summary>Field number for the "success" field.</summary>
    public const int SuccessFieldNumber = 1;
    private bool success_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Success {
      get { return success_; }
      set {
        success_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as StartRenderingResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(StartRenderingResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Success != other.Success) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Success != false) hash ^= Success.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Success != false) {
        output.WriteRawTag(8);
        output.WriteBool(Success);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Success != false) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(StartRenderingResponse other) {
      if (other == null) {
        return;
      }
      if (other.Success != false) {
        Success = other.Success;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Success = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  public sealed partial class StopRenderingRequest : pb::IMessage<StopRenderingRequest> {
    private static readonly pb::MessageParser<StopRenderingRequest> _parser = new pb::MessageParser<StopRenderingRequest>(() => new StopRenderingRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<StopRenderingRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Sensormanagement.SensorManagementReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StopRenderingRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StopRenderingRequest(StopRenderingRequest other) : this() {
      sensorID_ = other.sensorID_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StopRenderingRequest Clone() {
      return new StopRenderingRequest(this);
    }

    /// <summary>Field number for the "sensorID" field.</summary>
    public const int SensorIDFieldNumber = 1;
    private int sensorID_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int SensorID {
      get { return sensorID_; }
      set {
        sensorID_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as StopRenderingRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(StopRenderingRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (SensorID != other.SensorID) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (SensorID != 0) hash ^= SensorID.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (SensorID != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(SensorID);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (SensorID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(SensorID);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(StopRenderingRequest other) {
      if (other == null) {
        return;
      }
      if (other.SensorID != 0) {
        SensorID = other.SensorID;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            SensorID = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class StopRenderingResponse : pb::IMessage<StopRenderingResponse> {
    private static readonly pb::MessageParser<StopRenderingResponse> _parser = new pb::MessageParser<StopRenderingResponse>(() => new StopRenderingResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<StopRenderingResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Sensormanagement.SensorManagementReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StopRenderingResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StopRenderingResponse(StopRenderingResponse other) : this() {
      success_ = other.success_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StopRenderingResponse Clone() {
      return new StopRenderingResponse(this);
    }

    /// <summary>Field number for the "success" field.</summary>
    public const int SuccessFieldNumber = 1;
    private bool success_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Success {
      get { return success_; }
      set {
        success_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as StopRenderingResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(StopRenderingResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Success != other.Success) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Success != false) hash ^= Success.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Success != false) {
        output.WriteRawTag(8);
        output.WriteBool(Success);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Success != false) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(StopRenderingResponse other) {
      if (other == null) {
        return;
      }
      if (other.Success != false) {
        Success = other.Success;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Success = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  public sealed partial class AllSensorsOfTypeRequest : pb::IMessage<AllSensorsOfTypeRequest> {
    private static readonly pb::MessageParser<AllSensorsOfTypeRequest> _parser = new pb::MessageParser<AllSensorsOfTypeRequest>(() => new AllSensorsOfTypeRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AllSensorsOfTypeRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Sensormanagement.SensorManagementReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AllSensorsOfTypeRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AllSensorsOfTypeRequest(AllSensorsOfTypeRequest other) : this() {
      type_ = other.type_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AllSensorsOfTypeRequest Clone() {
      return new AllSensorsOfTypeRequest(this);
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 1;
    private global::Sensormanagement.SensorType type_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Sensormanagement.SensorType Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AllSensorsOfTypeRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AllSensorsOfTypeRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Type != other.Type) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Type != 0) hash ^= Type.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Type != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Type);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Type != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Type);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AllSensorsOfTypeRequest other) {
      if (other == null) {
        return;
      }
      if (other.Type != 0) {
        Type = other.Type;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            type_ = (global::Sensormanagement.SensorType) input.ReadEnum();
            break;
          }
        }
      }
    }

  }

  public sealed partial class AllSensorsOfTypeResponse : pb::IMessage<AllSensorsOfTypeResponse> {
    private static readonly pb::MessageParser<AllSensorsOfTypeResponse> _parser = new pb::MessageParser<AllSensorsOfTypeResponse>(() => new AllSensorsOfTypeResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AllSensorsOfTypeResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Sensormanagement.SensorManagementReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AllSensorsOfTypeResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AllSensorsOfTypeResponse(AllSensorsOfTypeResponse other) : this() {
      sensors_ = other.sensors_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AllSensorsOfTypeResponse Clone() {
      return new AllSensorsOfTypeResponse(this);
    }

    /// <summary>Field number for the "sensors" field.</summary>
    public const int SensorsFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Sensormanagement.Sensor> _repeated_sensors_codec
        = pb::FieldCodec.ForMessage(10, global::Sensormanagement.Sensor.Parser);
    private readonly pbc::RepeatedField<global::Sensormanagement.Sensor> sensors_ = new pbc::RepeatedField<global::Sensormanagement.Sensor>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Sensormanagement.Sensor> Sensors {
      get { return sensors_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AllSensorsOfTypeResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AllSensorsOfTypeResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!sensors_.Equals(other.sensors_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= sensors_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      sensors_.WriteTo(output, _repeated_sensors_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += sensors_.CalculateSize(_repeated_sensors_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AllSensorsOfTypeResponse other) {
      if (other == null) {
        return;
      }
      sensors_.Add(other.sensors_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            sensors_.AddEntriesFrom(input, _repeated_sensors_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class AllSensorsOnVesselRequest : pb::IMessage<AllSensorsOnVesselRequest> {
    private static readonly pb::MessageParser<AllSensorsOnVesselRequest> _parser = new pb::MessageParser<AllSensorsOnVesselRequest>(() => new AllSensorsOnVesselRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AllSensorsOnVesselRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Sensormanagement.SensorManagementReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AllSensorsOnVesselRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AllSensorsOnVesselRequest(AllSensorsOnVesselRequest other) : this() {
      vesselID_ = other.vesselID_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AllSensorsOnVesselRequest Clone() {
      return new AllSensorsOnVesselRequest(this);
    }

    /// <summary>Field number for the "vesselID" field.</summary>
    public const int VesselIDFieldNumber = 1;
    private string vesselID_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string VesselID {
      get { return vesselID_; }
      set {
        vesselID_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AllSensorsOnVesselRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AllSensorsOnVesselRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (VesselID != other.VesselID) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (VesselID.Length != 0) hash ^= VesselID.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (VesselID.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(VesselID);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (VesselID.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(VesselID);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AllSensorsOnVesselRequest other) {
      if (other == null) {
        return;
      }
      if (other.VesselID.Length != 0) {
        VesselID = other.VesselID;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            VesselID = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class AllSensorsOnVesselResponse : pb::IMessage<AllSensorsOnVesselResponse> {
    private static readonly pb::MessageParser<AllSensorsOnVesselResponse> _parser = new pb::MessageParser<AllSensorsOnVesselResponse>(() => new AllSensorsOnVesselResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AllSensorsOnVesselResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Sensormanagement.SensorManagementReflection.Descriptor.MessageTypes[7]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AllSensorsOnVesselResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AllSensorsOnVesselResponse(AllSensorsOnVesselResponse other) : this() {
      sensors_ = other.sensors_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AllSensorsOnVesselResponse Clone() {
      return new AllSensorsOnVesselResponse(this);
    }

    /// <summary>Field number for the "sensors" field.</summary>
    public const int SensorsFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Sensormanagement.Sensor> _repeated_sensors_codec
        = pb::FieldCodec.ForMessage(10, global::Sensormanagement.Sensor.Parser);
    private readonly pbc::RepeatedField<global::Sensormanagement.Sensor> sensors_ = new pbc::RepeatedField<global::Sensormanagement.Sensor>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Sensormanagement.Sensor> Sensors {
      get { return sensors_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AllSensorsOnVesselResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AllSensorsOnVesselResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!sensors_.Equals(other.sensors_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= sensors_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      sensors_.WriteTo(output, _repeated_sensors_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += sensors_.CalculateSize(_repeated_sensors_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AllSensorsOnVesselResponse other) {
      if (other == null) {
        return;
      }
      sensors_.Add(other.sensors_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            sensors_.AddEntriesFrom(input, _repeated_sensors_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class Sensor : pb::IMessage<Sensor> {
    private static readonly pb::MessageParser<Sensor> _parser = new pb::MessageParser<Sensor>(() => new Sensor());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Sensor> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Sensormanagement.SensorManagementReflection.Descriptor.MessageTypes[8]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Sensor() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Sensor(Sensor other) : this() {
      id_ = other.id_;
      type_ = other.type_;
      sensorWidth_ = other.sensorWidth_;
      sensorHeight_ = other.sensorHeight_;
      ipAddress_ = other.ipAddress_;
      port_ = other.port_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Sensor Clone() {
      return new Sensor(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private int id_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 2;
    private global::Sensormanagement.SensorType type_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Sensormanagement.SensorType Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    /// <summary>Field number for the "sensorWidth" field.</summary>
    public const int SensorWidthFieldNumber = 3;
    private int sensorWidth_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int SensorWidth {
      get { return sensorWidth_; }
      set {
        sensorWidth_ = value;
      }
    }

    /// <summary>Field number for the "sensorHeight" field.</summary>
    public const int SensorHeightFieldNumber = 4;
    private int sensorHeight_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int SensorHeight {
      get { return sensorHeight_; }
      set {
        sensorHeight_ = value;
      }
    }

    /// <summary>Field number for the "ipAddress" field.</summary>
    public const int IpAddressFieldNumber = 5;
    private string ipAddress_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string IpAddress {
      get { return ipAddress_; }
      set {
        ipAddress_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "port" field.</summary>
    public const int PortFieldNumber = 6;
    private int port_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Port {
      get { return port_; }
      set {
        port_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Sensor);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Sensor other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (Type != other.Type) return false;
      if (SensorWidth != other.SensorWidth) return false;
      if (SensorHeight != other.SensorHeight) return false;
      if (IpAddress != other.IpAddress) return false;
      if (Port != other.Port) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id != 0) hash ^= Id.GetHashCode();
      if (Type != 0) hash ^= Type.GetHashCode();
      if (SensorWidth != 0) hash ^= SensorWidth.GetHashCode();
      if (SensorHeight != 0) hash ^= SensorHeight.GetHashCode();
      if (IpAddress.Length != 0) hash ^= IpAddress.GetHashCode();
      if (Port != 0) hash ^= Port.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Id);
      }
      if (Type != 0) {
        output.WriteRawTag(16);
        output.WriteEnum((int) Type);
      }
      if (SensorWidth != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(SensorWidth);
      }
      if (SensorHeight != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(SensorHeight);
      }
      if (IpAddress.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(IpAddress);
      }
      if (Port != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(Port);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Id);
      }
      if (Type != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Type);
      }
      if (SensorWidth != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(SensorWidth);
      }
      if (SensorHeight != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(SensorHeight);
      }
      if (IpAddress.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(IpAddress);
      }
      if (Port != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Port);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Sensor other) {
      if (other == null) {
        return;
      }
      if (other.Id != 0) {
        Id = other.Id;
      }
      if (other.Type != 0) {
        Type = other.Type;
      }
      if (other.SensorWidth != 0) {
        SensorWidth = other.SensorWidth;
      }
      if (other.SensorHeight != 0) {
        SensorHeight = other.SensorHeight;
      }
      if (other.IpAddress.Length != 0) {
        IpAddress = other.IpAddress;
      }
      if (other.Port != 0) {
        Port = other.Port;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Id = input.ReadInt32();
            break;
          }
          case 16: {
            type_ = (global::Sensormanagement.SensorType) input.ReadEnum();
            break;
          }
          case 24: {
            SensorWidth = input.ReadInt32();
            break;
          }
          case 32: {
            SensorHeight = input.ReadInt32();
            break;
          }
          case 42: {
            IpAddress = input.ReadString();
            break;
          }
          case 48: {
            Port = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
