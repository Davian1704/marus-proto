// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: sensor_streaming.proto
// </auto-generated>
#pragma warning disable 0414, 1591
#region Designer generated code

using grpc = global::Grpc.Core;

namespace Sensorstreaming {
  public static partial class SensorStreaming
  {
    static readonly string __ServiceName = "sensorstreaming.SensorStreaming";

    static readonly grpc::Marshaller<global::Sensorstreaming.CameraStreamingRequest> __Marshaller_sensorstreaming_CameraStreamingRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Sensorstreaming.CameraStreamingRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Sensorstreaming.StreamingResponse> __Marshaller_sensorstreaming_StreamingResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Sensorstreaming.StreamingResponse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Sensorstreaming.LidarStreamingRequest> __Marshaller_sensorstreaming_LidarStreamingRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Sensorstreaming.LidarStreamingRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Sensorstreaming.RadarStreamingRequest> __Marshaller_sensorstreaming_RadarStreamingRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Sensorstreaming.RadarStreamingRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Sensorstreaming.DepthStreamingRequest> __Marshaller_sensorstreaming_DepthStreamingRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Sensorstreaming.DepthStreamingRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Sensorstreaming.DvlStreamingRequest> __Marshaller_sensorstreaming_DvlStreamingRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Sensorstreaming.DvlStreamingRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Sensorstreaming.GnssStreamingRequest> __Marshaller_sensorstreaming_GnssStreamingRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Sensorstreaming.GnssStreamingRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Sensorstreaming.ImuStreamingRequest> __Marshaller_sensorstreaming_ImuStreamingRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Sensorstreaming.ImuStreamingRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Sensorstreaming.PoseStreamingRequest> __Marshaller_sensorstreaming_PoseStreamingRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Sensorstreaming.PoseStreamingRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Sensorstreaming.NavigationStatusStreamingRequest> __Marshaller_sensorstreaming_NavigationStatusStreamingRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Sensorstreaming.NavigationStatusStreamingRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Sensorstreaming.SonarStreamingRequest> __Marshaller_sensorstreaming_SonarStreamingRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Sensorstreaming.SonarStreamingRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Sensorstreaming.AISStreamingRequest> __Marshaller_sensorstreaming_AISStreamingRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Sensorstreaming.AISStreamingRequest.Parser.ParseFrom);

    static readonly grpc::Method<global::Sensorstreaming.CameraStreamingRequest, global::Sensorstreaming.StreamingResponse> __Method_StreamCameraSensor = new grpc::Method<global::Sensorstreaming.CameraStreamingRequest, global::Sensorstreaming.StreamingResponse>(
        grpc::MethodType.ClientStreaming,
        __ServiceName,
        "StreamCameraSensor",
        __Marshaller_sensorstreaming_CameraStreamingRequest,
        __Marshaller_sensorstreaming_StreamingResponse);

    static readonly grpc::Method<global::Sensorstreaming.LidarStreamingRequest, global::Sensorstreaming.StreamingResponse> __Method_StreamLidarSensor = new grpc::Method<global::Sensorstreaming.LidarStreamingRequest, global::Sensorstreaming.StreamingResponse>(
        grpc::MethodType.ClientStreaming,
        __ServiceName,
        "StreamLidarSensor",
        __Marshaller_sensorstreaming_LidarStreamingRequest,
        __Marshaller_sensorstreaming_StreamingResponse);

    static readonly grpc::Method<global::Sensorstreaming.RadarStreamingRequest, global::Sensorstreaming.StreamingResponse> __Method_StreamRadarSensor = new grpc::Method<global::Sensorstreaming.RadarStreamingRequest, global::Sensorstreaming.StreamingResponse>(
        grpc::MethodType.ClientStreaming,
        __ServiceName,
        "StreamRadarSensor",
        __Marshaller_sensorstreaming_RadarStreamingRequest,
        __Marshaller_sensorstreaming_StreamingResponse);

    static readonly grpc::Method<global::Sensorstreaming.DepthStreamingRequest, global::Sensorstreaming.StreamingResponse> __Method_StreamDepthSensor = new grpc::Method<global::Sensorstreaming.DepthStreamingRequest, global::Sensorstreaming.StreamingResponse>(
        grpc::MethodType.ClientStreaming,
        __ServiceName,
        "StreamDepthSensor",
        __Marshaller_sensorstreaming_DepthStreamingRequest,
        __Marshaller_sensorstreaming_StreamingResponse);

    static readonly grpc::Method<global::Sensorstreaming.DvlStreamingRequest, global::Sensorstreaming.StreamingResponse> __Method_StreamDvlSensor = new grpc::Method<global::Sensorstreaming.DvlStreamingRequest, global::Sensorstreaming.StreamingResponse>(
        grpc::MethodType.ClientStreaming,
        __ServiceName,
        "StreamDvlSensor",
        __Marshaller_sensorstreaming_DvlStreamingRequest,
        __Marshaller_sensorstreaming_StreamingResponse);

    static readonly grpc::Method<global::Sensorstreaming.GnssStreamingRequest, global::Sensorstreaming.StreamingResponse> __Method_StreamGnssSensor = new grpc::Method<global::Sensorstreaming.GnssStreamingRequest, global::Sensorstreaming.StreamingResponse>(
        grpc::MethodType.ClientStreaming,
        __ServiceName,
        "StreamGnssSensor",
        __Marshaller_sensorstreaming_GnssStreamingRequest,
        __Marshaller_sensorstreaming_StreamingResponse);

    static readonly grpc::Method<global::Sensorstreaming.ImuStreamingRequest, global::Sensorstreaming.StreamingResponse> __Method_StreamImuSensor = new grpc::Method<global::Sensorstreaming.ImuStreamingRequest, global::Sensorstreaming.StreamingResponse>(
        grpc::MethodType.ClientStreaming,
        __ServiceName,
        "StreamImuSensor",
        __Marshaller_sensorstreaming_ImuStreamingRequest,
        __Marshaller_sensorstreaming_StreamingResponse);

    static readonly grpc::Method<global::Sensorstreaming.PoseStreamingRequest, global::Sensorstreaming.StreamingResponse> __Method_StreamPoseSensor = new grpc::Method<global::Sensorstreaming.PoseStreamingRequest, global::Sensorstreaming.StreamingResponse>(
        grpc::MethodType.ClientStreaming,
        __ServiceName,
        "StreamPoseSensor",
        __Marshaller_sensorstreaming_PoseStreamingRequest,
        __Marshaller_sensorstreaming_StreamingResponse);

    static readonly grpc::Method<global::Sensorstreaming.NavigationStatusStreamingRequest, global::Sensorstreaming.StreamingResponse> __Method_StreamNavigationStatusSensor = new grpc::Method<global::Sensorstreaming.NavigationStatusStreamingRequest, global::Sensorstreaming.StreamingResponse>(
        grpc::MethodType.ClientStreaming,
        __ServiceName,
        "StreamNavigationStatusSensor",
        __Marshaller_sensorstreaming_NavigationStatusStreamingRequest,
        __Marshaller_sensorstreaming_StreamingResponse);

    static readonly grpc::Method<global::Sensorstreaming.SonarStreamingRequest, global::Sensorstreaming.StreamingResponse> __Method_StreamSonarSensor = new grpc::Method<global::Sensorstreaming.SonarStreamingRequest, global::Sensorstreaming.StreamingResponse>(
        grpc::MethodType.ClientStreaming,
        __ServiceName,
        "StreamSonarSensor",
        __Marshaller_sensorstreaming_SonarStreamingRequest,
        __Marshaller_sensorstreaming_StreamingResponse);

    static readonly grpc::Method<global::Sensorstreaming.AISStreamingRequest, global::Sensorstreaming.StreamingResponse> __Method_StreamAisSensor = new grpc::Method<global::Sensorstreaming.AISStreamingRequest, global::Sensorstreaming.StreamingResponse>(
        grpc::MethodType.ClientStreaming,
        __ServiceName,
        "StreamAisSensor",
        __Marshaller_sensorstreaming_AISStreamingRequest,
        __Marshaller_sensorstreaming_StreamingResponse);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::Sensorstreaming.SensorStreamingReflection.Descriptor.Services[0]; }
    }

    /// <summary>Base class for server-side implementations of SensorStreaming</summary>
    public abstract partial class SensorStreamingBase
    {
      public virtual global::System.Threading.Tasks.Task<global::Sensorstreaming.StreamingResponse> StreamCameraSensor(grpc::IAsyncStreamReader<global::Sensorstreaming.CameraStreamingRequest> requestStream, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::Sensorstreaming.StreamingResponse> StreamLidarSensor(grpc::IAsyncStreamReader<global::Sensorstreaming.LidarStreamingRequest> requestStream, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::Sensorstreaming.StreamingResponse> StreamRadarSensor(grpc::IAsyncStreamReader<global::Sensorstreaming.RadarStreamingRequest> requestStream, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::Sensorstreaming.StreamingResponse> StreamDepthSensor(grpc::IAsyncStreamReader<global::Sensorstreaming.DepthStreamingRequest> requestStream, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::Sensorstreaming.StreamingResponse> StreamDvlSensor(grpc::IAsyncStreamReader<global::Sensorstreaming.DvlStreamingRequest> requestStream, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::Sensorstreaming.StreamingResponse> StreamGnssSensor(grpc::IAsyncStreamReader<global::Sensorstreaming.GnssStreamingRequest> requestStream, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::Sensorstreaming.StreamingResponse> StreamImuSensor(grpc::IAsyncStreamReader<global::Sensorstreaming.ImuStreamingRequest> requestStream, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::Sensorstreaming.StreamingResponse> StreamPoseSensor(grpc::IAsyncStreamReader<global::Sensorstreaming.PoseStreamingRequest> requestStream, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::Sensorstreaming.StreamingResponse> StreamNavigationStatusSensor(grpc::IAsyncStreamReader<global::Sensorstreaming.NavigationStatusStreamingRequest> requestStream, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::Sensorstreaming.StreamingResponse> StreamSonarSensor(grpc::IAsyncStreamReader<global::Sensorstreaming.SonarStreamingRequest> requestStream, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::Sensorstreaming.StreamingResponse> StreamAisSensor(grpc::IAsyncStreamReader<global::Sensorstreaming.AISStreamingRequest> requestStream, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

    }

    /// <summary>Client for SensorStreaming</summary>
    public partial class SensorStreamingClient : grpc::ClientBase<SensorStreamingClient>
    {
      /// <summary>Creates a new client for SensorStreaming</summary>
      /// <param name="channel">The channel to use to make remote calls.</param>
      public SensorStreamingClient(grpc::Channel channel) : base(channel)
      {
      }
      /// <summary>Creates a new client for SensorStreaming that uses a custom <c>CallInvoker</c>.</summary>
      /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
      public SensorStreamingClient(grpc::CallInvoker callInvoker) : base(callInvoker)
      {
      }
      /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      protected SensorStreamingClient() : base()
      {
      }
      /// <summary>Protected constructor to allow creation of configured clients.</summary>
      /// <param name="configuration">The client configuration.</param>
      protected SensorStreamingClient(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      public virtual grpc::AsyncClientStreamingCall<global::Sensorstreaming.CameraStreamingRequest, global::Sensorstreaming.StreamingResponse> StreamCameraSensor(grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return StreamCameraSensor(new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncClientStreamingCall<global::Sensorstreaming.CameraStreamingRequest, global::Sensorstreaming.StreamingResponse> StreamCameraSensor(grpc::CallOptions options)
      {
        return CallInvoker.AsyncClientStreamingCall(__Method_StreamCameraSensor, null, options);
      }
      public virtual grpc::AsyncClientStreamingCall<global::Sensorstreaming.LidarStreamingRequest, global::Sensorstreaming.StreamingResponse> StreamLidarSensor(grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return StreamLidarSensor(new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncClientStreamingCall<global::Sensorstreaming.LidarStreamingRequest, global::Sensorstreaming.StreamingResponse> StreamLidarSensor(grpc::CallOptions options)
      {
        return CallInvoker.AsyncClientStreamingCall(__Method_StreamLidarSensor, null, options);
      }
      public virtual grpc::AsyncClientStreamingCall<global::Sensorstreaming.RadarStreamingRequest, global::Sensorstreaming.StreamingResponse> StreamRadarSensor(grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return StreamRadarSensor(new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncClientStreamingCall<global::Sensorstreaming.RadarStreamingRequest, global::Sensorstreaming.StreamingResponse> StreamRadarSensor(grpc::CallOptions options)
      {
        return CallInvoker.AsyncClientStreamingCall(__Method_StreamRadarSensor, null, options);
      }
      public virtual grpc::AsyncClientStreamingCall<global::Sensorstreaming.DepthStreamingRequest, global::Sensorstreaming.StreamingResponse> StreamDepthSensor(grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return StreamDepthSensor(new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncClientStreamingCall<global::Sensorstreaming.DepthStreamingRequest, global::Sensorstreaming.StreamingResponse> StreamDepthSensor(grpc::CallOptions options)
      {
        return CallInvoker.AsyncClientStreamingCall(__Method_StreamDepthSensor, null, options);
      }
      public virtual grpc::AsyncClientStreamingCall<global::Sensorstreaming.DvlStreamingRequest, global::Sensorstreaming.StreamingResponse> StreamDvlSensor(grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return StreamDvlSensor(new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncClientStreamingCall<global::Sensorstreaming.DvlStreamingRequest, global::Sensorstreaming.StreamingResponse> StreamDvlSensor(grpc::CallOptions options)
      {
        return CallInvoker.AsyncClientStreamingCall(__Method_StreamDvlSensor, null, options);
      }
      public virtual grpc::AsyncClientStreamingCall<global::Sensorstreaming.GnssStreamingRequest, global::Sensorstreaming.StreamingResponse> StreamGnssSensor(grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return StreamGnssSensor(new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncClientStreamingCall<global::Sensorstreaming.GnssStreamingRequest, global::Sensorstreaming.StreamingResponse> StreamGnssSensor(grpc::CallOptions options)
      {
        return CallInvoker.AsyncClientStreamingCall(__Method_StreamGnssSensor, null, options);
      }
      public virtual grpc::AsyncClientStreamingCall<global::Sensorstreaming.ImuStreamingRequest, global::Sensorstreaming.StreamingResponse> StreamImuSensor(grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return StreamImuSensor(new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncClientStreamingCall<global::Sensorstreaming.ImuStreamingRequest, global::Sensorstreaming.StreamingResponse> StreamImuSensor(grpc::CallOptions options)
      {
        return CallInvoker.AsyncClientStreamingCall(__Method_StreamImuSensor, null, options);
      }
      public virtual grpc::AsyncClientStreamingCall<global::Sensorstreaming.PoseStreamingRequest, global::Sensorstreaming.StreamingResponse> StreamPoseSensor(grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return StreamPoseSensor(new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncClientStreamingCall<global::Sensorstreaming.PoseStreamingRequest, global::Sensorstreaming.StreamingResponse> StreamPoseSensor(grpc::CallOptions options)
      {
        return CallInvoker.AsyncClientStreamingCall(__Method_StreamPoseSensor, null, options);
      }
      public virtual grpc::AsyncClientStreamingCall<global::Sensorstreaming.NavigationStatusStreamingRequest, global::Sensorstreaming.StreamingResponse> StreamNavigationStatusSensor(grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return StreamNavigationStatusSensor(new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncClientStreamingCall<global::Sensorstreaming.NavigationStatusStreamingRequest, global::Sensorstreaming.StreamingResponse> StreamNavigationStatusSensor(grpc::CallOptions options)
      {
        return CallInvoker.AsyncClientStreamingCall(__Method_StreamNavigationStatusSensor, null, options);
      }
      public virtual grpc::AsyncClientStreamingCall<global::Sensorstreaming.SonarStreamingRequest, global::Sensorstreaming.StreamingResponse> StreamSonarSensor(grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return StreamSonarSensor(new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncClientStreamingCall<global::Sensorstreaming.SonarStreamingRequest, global::Sensorstreaming.StreamingResponse> StreamSonarSensor(grpc::CallOptions options)
      {
        return CallInvoker.AsyncClientStreamingCall(__Method_StreamSonarSensor, null, options);
      }
      public virtual grpc::AsyncClientStreamingCall<global::Sensorstreaming.AISStreamingRequest, global::Sensorstreaming.StreamingResponse> StreamAisSensor(grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return StreamAisSensor(new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncClientStreamingCall<global::Sensorstreaming.AISStreamingRequest, global::Sensorstreaming.StreamingResponse> StreamAisSensor(grpc::CallOptions options)
      {
        return CallInvoker.AsyncClientStreamingCall(__Method_StreamAisSensor, null, options);
      }
      /// <summary>Creates a new instance of client from given <c>ClientBaseConfiguration</c>.</summary>
      protected override SensorStreamingClient NewInstance(ClientBaseConfiguration configuration)
      {
        return new SensorStreamingClient(configuration);
      }
    }

    /// <summary>Creates service definition that can be registered with a server</summary>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static grpc::ServerServiceDefinition BindService(SensorStreamingBase serviceImpl)
    {
      return grpc::ServerServiceDefinition.CreateBuilder()
          .AddMethod(__Method_StreamCameraSensor, serviceImpl.StreamCameraSensor)
          .AddMethod(__Method_StreamLidarSensor, serviceImpl.StreamLidarSensor)
          .AddMethod(__Method_StreamRadarSensor, serviceImpl.StreamRadarSensor)
          .AddMethod(__Method_StreamDepthSensor, serviceImpl.StreamDepthSensor)
          .AddMethod(__Method_StreamDvlSensor, serviceImpl.StreamDvlSensor)
          .AddMethod(__Method_StreamGnssSensor, serviceImpl.StreamGnssSensor)
          .AddMethod(__Method_StreamImuSensor, serviceImpl.StreamImuSensor)
          .AddMethod(__Method_StreamPoseSensor, serviceImpl.StreamPoseSensor)
          .AddMethod(__Method_StreamNavigationStatusSensor, serviceImpl.StreamNavigationStatusSensor)
          .AddMethod(__Method_StreamSonarSensor, serviceImpl.StreamSonarSensor)
          .AddMethod(__Method_StreamAisSensor, serviceImpl.StreamAisSensor).Build();
    }

  }
}
#endregion
